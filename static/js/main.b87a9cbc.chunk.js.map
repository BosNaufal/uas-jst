{"version":3,"sources":["components/VariableForm.js","components/LogicGate/TargetForm.js","components/LogicGate/index.js","components/ResultTable/RowModel.js","components/ResultTable/RowBrain.js","components/ResultTable/RowBrainModel.js","components/ResultTable/Row.js","components/ResultTable/CaraHitungItem.js","components/ResultTable/CaraHitung.js","components/ResultTable/index.js","App.js","serviceWorker.js","index.js"],"names":["VariableForm","makePayload","name","value","newVariables","Object","objectSpread","_this","props","variables","handleInputChange","e","target","onChange","this","react_default","a","createElement","type","placeholder","w1","w2","b","learning_rate","Component","TargetForm","index","makeItNumber","floatNumber","parseFloat","isNaN","p1","p2","t","LogicGateForm","makeTargetPayload","isThereEmptyForm","someFormIsEmpty","targetList","forEach","_","formIsEmpty","formPayload","someFieldIsEmpty","keys","key","console","log","addTarget","newTargetList","concat","toConsumableArray","updateTarget","_ref","defineProperty","handleTargetFormChange","payload","_this2","map","LogicGate_TargetForm","onClick","RowModel","classCallCheck","countN","_this$props","toFixed","countA","countE","countNewWeight","_this$props2","w","p","RowBrain","state","countedRows","doneIteration","successIteration","doYourJob","setState","currentIteration","doIteration","_targetList","_variables","_this$iterateRowGroup","iterateRowGroup","makeVariablesNumber","rowData","isHasError","maxIteration","makeRowValue","row","iterationNumber","n","newW1","newW2","allErrorValues","_pullAll","length","newWeight","children","allRowData","recount","message","RowBrainModel","result","Row","data","targetLength","TARGET_LENGTH","shouldRowSpan","rowSpan","CaraHitungItem","style","display","flexDirection","paddingLeft","CaraHitung","ResultTable_CaraHitungItem","React","ResultTable","iterateLikeAPro","allVariables","generateVariable","success","range","weight","bias","learningRate","allGeneratedVariables","_w1","_w2","_b","_learning_rate","push","handleRecount","handleDone","ResultTable_RowBrain","onDone","_ref2","className","colSpan","ResultTable_Row","ResultTable_CaraHitung","App","handleVariableFormChange","handleLogicFormChange","LogicGate","components_VariableForm","components_ResultTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b87a9cbc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass VariableForm extends Component {\n  makePayload = (name, value) => {\n    const newVariables = {...this.props.variables}\n    newVariables[name] = value\n    return newVariables\n  }\n\n  handleInputChange = (name) => (e) => {\n    const { value } = e.target\n    this.props.onChange(\n      this.makePayload(name, value)\n    )\n  }\n  \n  render() { \n    const { variables } = this.props\n    return ( \n      <div>\n        <input \n          type=\"text\" \n          placeholder=\"w1\" \n          onChange={this.handleInputChange(\"w1\")}\n          value={variables.w1}\n        />\n        <input \n          type=\"text\" \n          placeholder=\"w2\" \n          onChange={this.handleInputChange(\"w2\")}\n          value={variables.w2}\n        />\n        <input \n          type=\"text\" \n          placeholder=\"b\" \n          onChange={this.handleInputChange(\"b\")}\n          value={variables.b}\n        />\n        <input \n          type=\"text\" \n          placeholder=\"learning rate\" \n          onChange={this.handleInputChange(\"learning_rate\")}\n          value={variables.learning_rate}\n        />\n      </div>\n    );\n  }\n}\n \nexport default VariableForm;","import React, { Component } from 'react';\n\nclass TargetForm extends Component {\n\n  makePayload = (name, value) => {\n    return {\n      index: this.props.index,\n      name,\n      value,\n    }\n  }\n\n  makeItNumber = (value) => {\n    const floatNumber = parseFloat(value)\n    if (isNaN(floatNumber)) return 0\n    return floatNumber\n  }\n\n  handleInputChange = (name) => (e) => {\n    const { value } = e.target\n    this.props.onChange(\n      this.makePayload(name, this.makeItNumber(value))\n    )\n  }\n\n  render() { \n    const { target } = this.props\n    return ( \n      <div>\n        <input \n          type=\"text\" \n          placeholder=\"P1\" \n          onChange={this.handleInputChange(\"p1\")} \n          value={target.p1}\n        />\n        <input \n          type=\"text\" \n          placeholder=\"P2\" \n          onChange={this.handleInputChange(\"p2\")}\n          value={target.p2}\n        />\n        <input \n          type=\"text\" \n          placeholder=\"t\" \n          onChange={this.handleInputChange(\"t\")}\n          value={target.t}\n        />\n      </div>\n    );\n  }\n}\n \nexport default TargetForm;","import React, { Component } from 'react';\nimport TargetForm from './TargetForm';\n\nclass LogicGateForm extends Component {\n  makeTargetPayload = () => {\n    return {\n      p1: \"\",\n      p2: \"\",\n      t: \"\",\n    }\n  }\n\n  isThereEmptyForm = () => {\n    let someFormIsEmpty = false\n    this.props.targetList.forEach((_, index) => {\n      if (someFormIsEmpty) return false\n      if (this.formIsEmpty(index)) {\n        someFormIsEmpty = true\n      }\n    })\n    return someFormIsEmpty\n  }\n\n  formIsEmpty = (index) => {\n    const formPayload = this.props.targetList[index]\n    let someFieldIsEmpty = false\n    Object.keys(formPayload).forEach((key) => {\n      if (someFieldIsEmpty) return false\n      if (formPayload[key] === \"\") {\n        console.log(formPayload)\n        someFieldIsEmpty = true\n      }\n    })\n    return someFieldIsEmpty\n  }\n\n  addTarget = () => {\n    if (this.isThereEmptyForm()) return false\n    const newTargetList = [\n      ...this.props.targetList,\n      this.makeTargetPayload(),\n    ]\n    this.props.onChange(newTargetList)\n  }\n\n  updateTarget = ({ index, name, value }) => {\n    const newTargetList = [...this.props.targetList]\n    newTargetList[index] = {\n      ...(newTargetList[index]),\n      [name]: value,\n    }\n    this.props.onChange(newTargetList)\n  }\n\n  handleTargetFormChange = (payload) => {\n    this.updateTarget(payload)\n  }\n\n  render() { \n    return ( \n      <div>\n        {this.props.targetList.map((target, index) => (\n          <TargetForm \n            key={index} \n            index={index} \n            target={target}\n            onChange={this.handleTargetFormChange}\n          />\n        ))}\n        <button onClick={this.addTarget}>Add Target</button>\n      </div>\n    );\n  }\n}\n \nexport default LogicGateForm;","class RowModel {\n  constructor(props) {\n    this.props = props\n  }\n\n  countN = () => {\n    const { target, variables } = this.props\n    const { p1, p2 } = target\n    const { w1, w2, b } = variables\n    const result = ((p1 * w1) + (p2 * w2) - b)\n    return parseFloat(result.toFixed(2))\n  }\n\n  countA = () => {\n    const n = this.countN()\n    return n >= 0 ? 1 : 0\n  }\n\n  countE = () => {\n    const { target } = this.props\n    const { t } = target\n    const a = this.countA()\n    return t - a\n  }\n\n  countNewWeight = (index) => {\n    const { target, variables } = this.props\n    const { learning_rate } = variables\n    const w = variables[`w${index}`]\n    const p = target[`p${index}`]\n    const e = this.countE()\n    const result = (w + (learning_rate * p * e))\n    return parseFloat(result.toFixed(2))\n  }\n}\n \nexport default RowModel;","import React, { Component } from 'react';\nimport RowModel from './RowModel'\nimport _pullAll from 'lodash/pullAll'\n\nclass RowBrain extends Component {\n\n  state = {\n    countedRows: [],\n    doneIteration: 0,\n    successIteration: 0,\n  }\n\n  doYourJob = () => {\n    this.setState({ countedRows: [] }, () => {\n      let currentIteration = 1\n      let countedRows = []\n      let successIteration = 0\n      const doIteration = (_targetList, _variables) => {\n        const { rowData, newVariables } = this.iterateRowGroup(\n          _targetList, \n          this.makeVariablesNumber(_variables),\n          currentIteration,\n        )\n        countedRows = [\n          ...countedRows,\n          ...rowData,\n        ]\n        if (this.isHasError(rowData) && currentIteration < this.props.maxIteration) {\n          currentIteration++\n          return doIteration(rowData, newVariables, currentIteration)\n        }\n        if (!this.isHasError(rowData)) {\n          successIteration = currentIteration\n        }\n        return currentIteration\n      }\n  \n      const { targetList, variables } = this.props\n      const doneIteration = doIteration(targetList, variables, currentIteration)\n\n      this.setState({ \n        countedRows,\n        doneIteration,\n        successIteration,\n      })\n    })\n  }\n\n  makeVariablesNumber = (variables) => {\n    const newVariables = {}\n    Object.keys(variables).forEach((key) => {\n      newVariables[key] = parseFloat(variables[key])\n    })\n    return newVariables\n  }\n\n  makeRowValue = (row, index) => ({\n    iterationNumber: row.props.variables.iterationNumber,\n    index: index + 1,\n    p1: row.props.target.p1,\n    p2: row.props.target.p2,\n    t: row.props.target.t,\n    w1: row.props.variables.w1,\n    w2: row.props.variables.w2,\n    b: row.props.variables.b,\n    learning_rate: row.props.variables.learning_rate,\n    n: row.countN(),\n    a: row.countA(),\n    e: row.countE(),\n    newW1: row.countNewWeight(1),\n    newW2: row.countNewWeight(2),\n  })\n\n  isHasError = (rowData) => {\n    const allErrorValues = rowData.map((row) => (row.e))\n    const errorFound = _pullAll(allErrorValues, [0]).length > 0\n    return errorFound\n  }\n\n  iterateRowGroup = (targetList, variables, iterationNumber) => {\n    let newWeight = {}\n    const allRowData = targetList.map((target, index) => {\n      if (index === 0) {\n        newWeight = {\n          w1: variables.w1,\n          w2: variables.w2,\n        }\n      }\n      const row = new RowModel({\n        target,\n        variables: {\n          iterationNumber,\n          ...variables,\n          ...newWeight\n        },\n      })\n\n      const value = this.makeRowValue(row, index)\n\n      newWeight = {\n        w1: value.newW1,\n        w2: value.newW2,\n      }\n\n      return value\n    })\n\n    return {\n      rowData: allRowData,\n      newVariables: {\n        ...variables,\n        ...newWeight,\n      }\n    }\n  }\n\n  render() {\n    return this.props.children({\n      allRowData: this.state.countedRows, \n      recount: this.doYourJob,\n      message: this.state.successIteration === 0 ? \"Don't Give Up!\" : \"Alhamdulillah, You've got it!\",\n    })\n  }\n}\n \nexport default RowBrain;","import RowModel from './RowModel'\nimport _pullAll from 'lodash/pullAll'\n\nclass RowBrainModel {\n  constructor(props) {\n    this.props = props\n  }\n\n  state = {\n    countedRows: [],\n    doneIteration: 0,\n    successIteration: 0,\n  }\n\n  doYourJob = () => {\n    this.state = {\n      ...this.state,\n      countedRows: []\n    }\n    \n    let currentIteration = 1\n    let countedRows = []\n    let successIteration = 0\n\n    const doIteration = (_targetList, _variables) => {\n      const { rowData, newVariables } = this.iterateRowGroup(\n        _targetList, \n        this.makeVariablesNumber(_variables),\n        currentIteration,\n      )\n\n      countedRows = [\n        ...countedRows,\n        ...rowData,\n      ]\n      if (this.isHasError(rowData) && currentIteration < this.props.maxIteration) {\n        currentIteration++\n        return doIteration(rowData, newVariables, currentIteration)\n      }\n      if (!this.isHasError(rowData)) {\n        successIteration = currentIteration\n      }\n      return currentIteration\n    }\n\n    const { targetList, variables } = this.props\n    const doneIteration = doIteration(targetList, variables, currentIteration)\n\n    this.state = {\n      ...this.state,\n      countedRows,\n      doneIteration,\n      successIteration,\n    }\n\n    return this.result()\n  }\n\n  makeVariablesNumber = (variables) => {\n    const newVariables = {}\n    Object.keys(variables).forEach((key) => {\n      newVariables[key] = parseFloat(variables[key])\n    })\n    return newVariables\n  }\n\n  makeRowValue = (row, index) => ({\n    iterationNumber: row.props.variables.iterationNumber,\n    index: index + 1,\n    p1: row.props.target.p1,\n    p2: row.props.target.p2,\n    t: row.props.target.t,\n    w1: row.props.variables.w1,\n    w2: row.props.variables.w2,\n    b: row.props.variables.b,\n    learning_rate: row.props.variables.learning_rate,\n    n: row.countN(),\n    a: row.countA(),\n    e: row.countE(),\n    newW1: row.countNewWeight(1),\n    newW2: row.countNewWeight(2),\n  })\n\n  isHasError = (rowData) => {\n    const allErrorValues = rowData.map((row) => (row.e))\n    const errorFound = _pullAll(allErrorValues, [0]).length > 0\n    return errorFound\n  }\n\n  iterateRowGroup = (targetList, variables, iterationNumber) => {\n    let newWeight = {}\n    const allRowData = targetList.map((target, index) => {\n      if (index === 0) {\n        newWeight = {\n          w1: variables.w1,\n          w2: variables.w2,\n        }\n      }\n      const row = new RowModel({\n        target,\n        variables: {\n          iterationNumber,\n          ...variables,\n          ...newWeight\n        },\n      })\n\n      const value = this.makeRowValue(row, index)\n\n      newWeight = {\n        w1: value.newW1,\n        w2: value.newW2,\n      }\n\n      return value\n    })\n\n    return {\n      rowData: allRowData,\n      newVariables: {\n        ...variables,\n        ...newWeight,\n      }\n    }\n  }\n\n  result() {\n    return ({\n      allRowData: this.state.countedRows, \n      recount: this.doYourJob,\n      successIteration: this.state.successIteration,\n      message: this.state.successIteration === 0 ? \"Don't Give Up!\" : \"Alhamdulillah, You've got it!\",\n    })\n  }\n}\n \nexport default RowBrainModel;","import React from 'react';\n\nconst Row = ({ data, index, targetLength }) => {\n  if (!data) return null\n  const TARGET_LENGTH = targetLength\n  const shouldRowSpan = (index + 1) % TARGET_LENGTH === 1\n  return ( \n    <tr>\n      {shouldRowSpan?\n        <td rowSpan={TARGET_LENGTH}>{(data.iterationNumber)}</td>\n      :null}\n      <td>{index + 1}</td>\n      <td>{data.p1}</td>\n      <td>{data.p2}</td>\n      <td>{data.t}</td>\n      <td>{data.w1}</td>\n      <td>{data.w2}</td>\n      <td>{data.b}</td>\n      <td>{data.learning_rate}</td>\n      <td>{data.n}</td>\n      <td>{data.a}</td>\n      <td>{data.e}</td>\n      <td>{data.newW1}</td>\n      <td>{data.newW2}</td>\n    </tr>\n  );\n}\nexport default Row;","import React from 'react'\n\nconst CaraHitungItem = ({\n  index,\n  row,\n}) => {\n  return ( \n    <div>\n      <h4>Iterasi Ke - {index + 1}</h4>\n      <div style={{ display: \"flex\", flexDirection: 'row' }}>\n        <div>\n          <div>\n            <div>n = (P1 x W1) + (P2 x W2) - b</div>\n            <div>n = ({row.p1} x {row.w1}) + ({row.p2} x {row.w2}) - {row.b}</div>\n            <div>n = ({row.p1 * row.w1}) + ({row.p2 * row.w2}) - {row.b}</div>\n            <div>n = {row.n}</div>\n          </div>\n          <br />\n          <div>\n            <div>a = n {\">=\"} 0 -> 1 OR n {\"<=\"} 0 -> 0 </div>\n            <div>a = {row.a}</div>\n          </div>\n          <br />\n          <div>\n            <div>e = t - a</div>\n            <div>e = {row.t} - {row.a}</div>\n            <div>e = {row.e}</div>\n          </div>\n        </div>\n        <div style={{ paddingLeft: 25 }}>\n          <div>\n            <div>w1 (baru) = w1 + (learning_rate x p1 x e)</div>\n            <div>w1 (baru) = {row.w1} + ({row.learning_rate} x {row.p1} x {row.e})</div>\n            <div>w1 (baru) = {row.w1} + ({row.learning_rate * row.p1 * row.e})</div>\n            <div>w1 (baru) = {row.newW1}</div>\n          </div>\n          <br />\n          <div>\n            <div>w2 (baru) = w2 + (learning_rate x p2 x e)</div>\n            <div>w2 (baru) = {row.w2} + ({row.learning_rate} x {row.p2} x {row.e})</div>\n            <div>w2 (baru) = {row.w2} + ({row.learning_rate * row.p2 * row.e})</div>\n            <div>w2 (baru) = {row.newW2}</div>\n          </div>\n        </div>\n      </div>\n      <hr />\n    </div>\n  );\n}\n \nexport default CaraHitungItem;","import React from 'react'\nimport CaraHitungItem from './CaraHitungItem';\n\nclass CaraHitung extends React.Component {\n  render() { \n    const { data } = this.props\n    if (!data.length) return null\n    return (\n      <div>\n        {data.map((row, index) => (\n          <CaraHitungItem \n            key={index}\n            index={index}\n            row={row} \n          />\n        ))}\n      </div>\n    );\n  }\n}\n \nexport default CaraHitung;","import React, { Component } from 'react';\n\nimport './table.css'\nimport RowBrain from './RowBrain';\nimport RowBrainModel from './RowBrainModel';\nimport Row from './Row';\nimport CaraHitung from './CaraHitung';\n\n\nclass ResultTable extends Component {\n  state = {\n    maxIteration: 15,\n  }\n\n  componentDidMount() {\n    // this.iterateLikeAPro()\n  }\n\n  iterateLikeAPro = () => {\n    const allVariables = this.generateVariable()\n    let success = false\n    allVariables.forEach((variables, index) => {\n      if (success !== false) return false\n      const brain = new RowBrainModel({\n        maxIteration: this.state.maxIteration,\n        targetList: this.props.targetList,\n        variables,\n      })\n      const result = brain.doYourJob()\n      console.log(\"variasi variable ke - \" + index, result)\n      if (result.successIteration !== 0) {\n        success = result\n      }\n    })\n    console.log(success)\n  }\n\n  generateVariable = () => {\n    const range = {\n      weight: [-0.5, -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5],\n      bias: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],\n      learningRate: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],\n    }\n    const allGeneratedVariables = []\n    range.weight.forEach((_w1) => {\n      range.weight.forEach((_w2) => {\n        range.bias.forEach((_b) => {\n          range.learningRate.forEach((_learning_rate) => {\n            allGeneratedVariables.push({\n              w1: _w1,\n              w2: _w2,\n              b: _b,\n              learning_rate: _learning_rate,\n            })\n          })\n        })\n      })\n    })\n    return allGeneratedVariables\n  }\n\n  makeItNumber = (value) => {\n    const floatNumber = parseFloat(value)\n    if (isNaN(floatNumber)) return 0\n    return floatNumber\n  }\n\n  handleInputChange = (e) => {\n    const { value } = e.target\n    this.setState({ maxIteration: this.makeItNumber(value) })\n  }\n\n  isThereEmptyForm = () => {\n    if (this.props.targetList.length === 0) return true\n    let someFormIsEmpty = false\n    this.props.targetList.forEach((_, index) => {\n      if (someFormIsEmpty) return false\n      if (this.formIsEmpty(index)) {\n        someFormIsEmpty = true\n      }\n    })\n    return someFormIsEmpty\n  }\n\n  formIsEmpty = (index) => {\n    const formPayload = this.props.targetList[index]\n    let someFieldIsEmpty = false\n    Object.keys(formPayload).forEach((key) => {\n      if (someFieldIsEmpty) return false\n      if (formPayload[key] === \"\") {\n        someFieldIsEmpty = true\n      }\n    })\n    return someFieldIsEmpty\n  }\n\n  handleRecount = (recount) => ()=> {\n    if (!this.isThereEmptyForm()) {\n      recount()\n    }\n  }\n\n  handleDone = ({ successIteration }) => {\n    if (successIteration) {\n      console.log(\"HERE\")\n    }\n  }\n\n  render() { \n    const { targetList, variables } = this.props\n    return (\n      <RowBrain \n        maxIteration={this.state.maxIteration}\n        targetList={targetList}\n        variables={variables}\n        onDone={this.handleDone}\n      >\n        {({ allRowData, recount, message }) => (\n          <div>\n            {!this.isThereEmptyForm() ?\n              <button onClick={this.handleRecount(recount)}>Bismillah Recount!</button>\n            : null}\n\n            <div>\n              <label>Max Iteration:</label>\n              <input \n                type=\"text\" \n                placeholder=\"Max Iteration\" \n                onChange={this.handleInputChange}\n                value={this.state.maxIteration}\n              />\n            </div>\n\n            <h1>{message}</h1>\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th rowSpan={2}>Epoh</th>\n                  <th rowSpan={2}>Iterasi</th>\n                  <th rowSpan={2}>P1</th>\n                  <th rowSpan={2}>P2</th>\n                  <th rowSpan={2}>t</th>\n                  <th colSpan={2}>Bobot Awal</th>\n                  <th rowSpan={2}>b</th>\n                  <th rowSpan={2}>Learning Rate</th>\n                  <th rowSpan={2}>n</th>\n                  <th rowSpan={2}>a</th>\n                  <th rowSpan={2}>e</th>\n                  <th colSpan={2}>Bobot Baru</th>\n                </tr>\n                <tr>\n                  <th>w1</th>\n                  <th>w2</th>\n                  <th>w1</th>\n                  <th>w2</th>\n                </tr>\n              </thead>\n              <tbody>\n                {allRowData.map((data, index) => (\n                  <Row \n                    key={index} \n                    index={index} \n                    data={data} \n                    targetLength={targetList.length}\n                  />\n                ))}\n              </tbody>\n            </table>\n\n            <CaraHitung data={allRowData} />\n          </div>\n        )}\n      </RowBrain>\n      \n    );\n  }\n}\n \nexport default ResultTable;","import React, { Component } from 'react';\nimport VariableForm from './components/VariableForm'\nimport LogicGateForm from './components/LogicGate'\nimport ResultTable from './components/ResultTable'\n\nclass App extends Component {\n\n  state = {\n    targetList: [],\n    variables: {\n      w1: \"\",\n      w2: \"\",\n      b: \"\",\n      learning_rate: \"\",\n    },\n  }\n\n  handleVariableFormChange = (variables) => {\n    this.setState({ variables })\n  }\n\n  handleLogicFormChange = (targetList) => {\n    this.setState({ targetList })\n  }\n\n  render() { \n    return (\n      <div className=\"App\">\n        <h1>Simple JST that count :v - updated v0.3</h1>\n        <LogicGateForm \n          targetList={this.state.targetList}\n          onChange={this.handleLogicFormChange} \n        />\n        <VariableForm \n          variables={this.state.variables}\n          onChange={this.handleVariableFormChange} \n        />\n        <ResultTable \n          targetList={this.state.targetList}\n          variables={this.state.variables}\n          // targetList={[\n          //   { p1: 0, p2: 0, t: 0 },\n          //   { p1: 0, p2: 1, t: 0 },\n          //   { p1: 1, p2: 0, t: 0 },\n          //   { p1: 1, p2: 1, t: 1 },\n\n          //   // { p1: 0, p2: 0, t: 0, },\n          //   // { p1: 0, p2: 1, t: 1, },\n          //   // { p1: 1, p2: 0, t: 1, },\n          //   // { p1: 1, p2: 1, t: 0, },\n          // ]}\n          // variables={{\n          //   w1: 0.3,\n          //   w2: 0.1,\n          //   b: 0.2,\n          //   learning_rate: 0.2,\n          // }}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}